{"version":3,"sources":["Components/EmailView/EmailView.jsx","Components/EmailCreate/EmailCreate.jsx","Components/EmailListItem/EmailListItem.jsx","Components/EmailList/EmailList.jsx","Components/EmailMain/EmailMain.jsx","Components/NavBar/NavBar.jsx","App.js","serviceWorker.js","index.js"],"names":["EmailView","state","email","_this2","this","id","props","match","params","emailURL","concat","fetch","then","response","json","data","setState","catch","console","log","react_default","a","createElement","className","to","subject","text","Button","positive","type","negative","Component","EmailCreate","emailList","Grid","Column","width","Segment","Form","class","placeholder","onChange","handleChange","EmailListItem","emailId","path","process","history","push","pathname","_this","onClick","handleClick","readOnly","from","substring","withRouter","EmailList","slice","EmailListItems","map","Components_EmailListItem_EmailListItem","key","EmailMain","react_router_dom","react_router","render","component","NavBar","aria-hidden","Components_EmailMain_EmailMain","App","href","Components_NavBar_NavBar","exact","Boolean","window","location","hostname","ReactDOM","basename","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.326b3bf7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Button } from 'semantic-ui-react';\nclass EmailView extends Component {\n\n    state = {\n        email:[]\n    }\n\n    componentDidMount () {\n      let id = this.props.match.params.id;\n      const emailURL = `https://5c5a21f9af3ff700140de477.mockapi.io/api/email/${id}`;\n\n      fetch(emailURL)\n      .then(response => response.json())\n      .then(data => {\n        this.setState({\n          email : data\n        })\n        })\n      .catch(() => {\n        console.log(\n          'Something wrong occured. Please try again'\n        );\n      });\n    }\n\n    render() {\n        return (\n          <div className=\"emailView\">\n            <div className=\"ui segments\">\n                <div className=\"ui segment\">\n                  <p>To : {this.state.email.to} </p>\n                </div>\n                <div className=\"ui segment\">\n                  <p>Subject : {this.state.email.subject}</p>\n                </div>\n                <div className=\"ui segment\">\n                  <p>{this.state.email.text}</p>\n                </div>\n            </div>\n            <Button className=\"formButton\" positive type=\"submit\">NEXT</Button>\n            <Button className=\"formButton\" negative type=\"submit\">PREV</Button>\n          </div>\n        )\n    }\n}\n\nexport default EmailView;","import React, { Component } from 'react';\nimport {Form, Segment, Button, Grid } from 'semantic-ui-react';\nclass EmailCreate extends Component {\n\n    state = {\n      emailList : []\n    }\n\n    render () {\n    return (\n          <Grid>\n            <Grid.Column width={16}>\n              <Segment>\n                <Form>\n                    <div class=\"field\">\n                        <label>To</label>\n                        <input placeholder=\"To\"/>\n                    </div>\n                    <div class=\"field\">\n                        <label>Subject</label>\n                        <input placeholder=\"Enter your subject here\"/>\n                    </div>\n                    <textarea placeholder=\"type your message here\" onChange={this.handleChange} />\n                    <Button className=\"formButton\" positive type=\"submit\">Send</Button>\n                </Form>\n              </Segment>\n            </Grid.Column>\n        </Grid>\n        )\n    }\n}\n\nexport default EmailCreate;","import React,{Component} from 'react';\nimport { withRouter } from 'react-router-dom'\n\n class EmailListItem extends Component {\n\n  handleClick(emailId) {\n    let path = `${process.env.PUBLIC_URL}/email/${emailId}`;\n    console.log(path)\n    this.props.history.push({\n      pathname: path,\n      state: { emailId:emailId }\n    });\n  }\n\n  render() {\n    return (\n      <div onClick={() => this.handleClick(this.props.email.id)}>\n        <div class=\"ui segment\">\n            <div class=\"ui inverted relaxed divided list\">\n            \n              <ul className=\"item\">\n                  <li>\n                    <span className=\"listContent\">\n                      <input type=\"checkbox\" className=\"check1\" readOnly={false} />\n                    </span>\n                      <span className=\"listContent1\">\n                        {this.props.email.from}\n                      </span>\n                      <span className=\"listContent2\">{this.props.email.text.substring(0, 70)}...</span>\n                  </li>\n              </ul>\n            </div>\n          </div>\n      </div>\n    )\n  }\n}\n\nexport default withRouter(EmailListItem)","import React, { Component } from 'react';\nimport EmailListItem from '../EmailListItem/EmailListItem';\nimport { Button } from 'semantic-ui-react';\n\nconst emailURL = \"https://5c5a21f9af3ff700140de477.mockapi.io/api/email/\";\n\nclass EmailList extends Component {\n\n  state = {\n    emailList : []\n  }\n\n  componentDidMount () {\n    fetch(emailURL)\n    .then(response => response.json())\n    .then(data => {\n       this.setState({\n         emailList : data.slice(0,10)\n       })\n      })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n  }\n\n  render() {\n  \n   const EmailListItems = this.state.emailList.map((email) => {\n        return (\n          <div>\n        <EmailListItem email= {email} key={email.id} />\n        <Button className=\"formButton\" negative type=\"submit\">DELETE</Button>\n        </div>\n        ) \n    })\n\n    return (\n      <div>\n       { EmailListItems }\n        </div> \n    )\n  }\n}\n\nexport default EmailList;","import React, { Component } from 'react';\nimport EmailView from '../EmailView/EmailView';\nimport EmailCreate from '../EmailCreate/EmailCreate';\nimport { Route, Switch } from 'react-router-dom';\nimport EmailList from '../EmailList/EmailList';\nimport { Link  } from \"react-router-dom\";\n\nclass EmailMain extends Component {\n\n  render() {\n      return (\n        <div>\n            <div className=\"main ui secondary pointing menu\">\n                <Link to={`${process.env.PUBLIC_URL}/email`} className=\" waves-effect center active item\">\n                        List\n                </Link>\n                <Link to={`${process.env.PUBLIC_URL}/email/new`} className=\"center active item\">\n                      Create\n                </Link>\n            </div>\n            <Route\n              path=\"/(.+)\"\n              render={() => (\n                    <div>\n                        <Switch>\n                            <Route path={`${process.env.PUBLIC_URL}/email/new`} component={EmailCreate} />\n                            <Route path={`${process.env.PUBLIC_URL}/email/:id`} component={EmailView} />\n                            <Route path={`${process.env.PUBLIC_URL}/email`} component={EmailList} />\n                        </Switch>\n                    </div>\n              )} />\n        </div>\n  )\n}\n}\nexport default EmailMain;\n","import React, { Component } from 'react'\nimport EmailMain from '../EmailMain/EmailMain';\nclass NavBar extends Component {\n\n  render() {\n\n    return (\n        <div class=\"row\">\n            <div className=\"col m3 l3\">\n                    <div className=\"ui navbar vertical menu\">\n                            <a className=\"active item\">\n                                <div className=\"ui teal label z-depth-4\">1</div>\n                                Inbox\n                            </a>\n                            <a className=\"item \"><div className=\"ui label\">51</div>Spam</a>\n                            <a className=\"item\"><div className=\"ui label\">1</div>Updates</a>\n                            <div className=\"item\">\n                                <div className=\"ui icon input\">\n                                <input type=\"text\" placeholder=\"Search mail...\"/>\n                                <i aria-hidden=\"true\" className=\"search icon\"></i>\n                                </div>\n                    </div>\n                </div>\n                </div>\n                <div className=\"col m9 l9\">\n                    <EmailMain></EmailMain>\n                    </div>\n        </div>\n    )\n  }\n}\n\nexport default NavBar","import React, { Component } from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport './App.css';\nimport NavBar from './Components/NavBar/NavBar'\n\nclass App extends Component {\n  render() {\n    return (\n      <div class=\"container\">\n         <nav>\n    <div class=\"nav-wrapper red darken-1\">\n      <a href=\"#\" class=\"brand-logo\">Email Client</a>\n      <ul id=\"nav-mobile\" class=\"right hide-on-med-and-down\">\n        <li><a >Contact</a></li>\n        <li><a >Login</a></li>\n        <li><a >Register</a></li>\n      </ul>\n    </div>\n  </nav>\n        <NavBar />\n         <Switch>\n          <Route exact path={`${process.env.PUBLIC_URL}/`} render={() => (\n                <Redirect to={`${process.env.PUBLIC_URL}/email`} />\n            )} />\n        </Switch> \n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport 'semantic-ui-css/semantic.min.css'; \nReactDOM.render(\n    <BrowserRouter basename={'/email'}>\n        <App />\n    </BrowserRouter>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}